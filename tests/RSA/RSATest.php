<?php


namespace ITS\Tests\RSA;

use ITS\Prime\Prime;
use ITS\RSA\RSA;

class RSATest extends \PHPUnit_Framework_TestCase
{
    private function providerRSAKey()
    {
        return [
            ['p'=>'397', 'q'=>'569', 'f'=>'224928', 'e'=>'5', 'd'=>'134957'],
            ['p'=>'9862529', 'q'=>'1258001', 'f'=>'12407060224000', 'e'=>'3', 'd'=>'8271373482667'],
            ['p'=>'9862529', 'q'=>'1258001', 'f'=>'12407060224000', 'e'=>'65537', 'd'=>'5464732905473'],
            ['p'=>'295077413', 'q'=>'295082621', 'f'=>'87072215835779440', 'e'=>'3', 'd'=>'58048143890519627'],
            ['p'=>'295077413', 'q'=>'295082621', 'f'=>'87072215835779440', 'e'=>'65537', 'd'=>'83229915330765873'],
            ['p'=>'894539561', 'q'=>'899809241', 'f'=>'804914961633534400', 'e'=>'3', 'd'=>'536609974422356267'],
            ['p'=>'179424697', 'q'=>'179430413', 'f'=>'32194247126254752', 'e'=>'179428943', 'd'=>'8286013874856719'],
            ['p'=>'167988556341760475137', 'q'=>'3560841906445833920513', 'f'=>'598180691225077754353737922393926776389632', 'e'=>'5', 'd'=>'239272276490031101741495168957570710555853'],
            ['p'=>'7455602825647884208337395736200454918783366342657', 'q'=>'4659775785220018543264560743076778192897', 'f'=>'34741437511171958643352682099698961413263372712036566151842030383739565268100676400971776', 'e'=>'65537', 'd'=>'11262063260827444975785094392604245467823982685616016111446723766766056794189524545503233'],
            ['p'=>'59649589127497217', 'q'=>'5704689200685129054721', 'f'=>'340282366920938457758625757157511659520', 'e'=>'7', 'd'=>'194447066811964833004929004090006662583']
        ];
    }

    private function providerRSACipher()
    {
        return [
            ['n'=>'225893', 'e'=>'5', 'd'=>'134957', 'g'=>'0', 'G'=>'0', 'h'=>'1', 'H'=>'1', 'i'=>'2335', 'I'=>'12215'],
            ['n'=>'12407071344529', 'e'=>'3', 'd'=>'8271373482667', 'g'=>'32423345345', 'G'=>'11926242792334', 'h'=>'4576576', 'H'=>'4503406035491', 'i'=>'4576576235235', 'I'=>'5382290575066'],
            ['n'=>'87072216425939473', 'e'=>'3', 'd'=>'58048143890519627', 'g'=>'44444444', 'G'=>'59631540043633404', 'h'=>'10101010101', 'H'=>'24108405142535509', 'i'=>'11011011011011', 'I'=>'41583971218789960'],
            ['n'=>'96958710399864373', 'e'=>'65537', 'd'=>'1800490559511693', 'g'=>'212141432432235', 'G'=>'48286125190387166', 'h'=>'2', 'H'=>'42804735263391722', 'i'=>'3', 'I'=>'31404450217824319'],
            ['n'=>'276600279988002779', 'e'=>'7', 'd'=>'79028651084057863', 'g'=>'3', 'G'=>'2187', 'h'=>'2187', 'H'=>'256600676853354907', 'i'=>'256600676853354907', 'I'=>'180578500039013560'],
            ['n'=>'1050809256121171336631', 'e'=>'5', 'd'=>'420323702422535584109', 'g'=>'617054646642407189', 'G'=>'615369611213216794056', 'h'=>'979797979797979797979', 'H'=>'477832235098289529734', 'i'=>'11111111111111111111', 'I'=>'775815424865160307728'],
            ['n'=>'1050809256121171336631', 'e'=>'295082621', 'd'=>'375052674231379323173', 'g'=>'11111111111111111111', 'G'=>'746351012199283012270', 'h'=>'746351012199283012270', 'H'=>'814841641964617701290', 'i'=>'746351012199283012275', 'I'=>'423793569556831054098'],
            ['n'=>'32194247485109861', 'e'=>'179428943', 'd'=>'8286013874856719', 'g'=>'6797696796567566', 'G'=>'3202662427800246', 'h'=>'10000000000000001', 'H'=>'28665933461899842', 'i'=>'9999999999999999', 'I'=>'8415492443894601'],
            ['n'=>'598180691225077754357466752856714370785281', 'e'=>'5', 'd'=>'239272276490031101741495168957570710555853', 'g'=>'9999999999999999', 'G'=>'12224338883742997042704720712597186518930', 'h'=>'99999999999999999999999999999999999999999', 'H'=>'82330858952101937430704180007979568105111', 'i'=>'101010101010101010101010101010101010101010', 'I'=>'355876984919102599359304006246672502129884'],
            ['n'=>'34741437511171958643352682099698961413270828314866873811835587798019030283762536545507329', 'e'=>'65537', 'd'=>'11262063260827444975785094392604245467823982685616016111446723766766056794189524545503233', 'g'=>'101010101010101010101010101010101010101010101010101', 'G'=>'27111590498907479264063099212422881113911020038393673903317634717063990382938277785075436', 'h'=>'9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'H'=>'28312674675448741954945253509443646729637149696304140849333467206924203883368676685674938', 'i'=>'2831267467544874195494525350944364672963714969630414453534543206924203883368676685674938', 'I'=>'2813100659035262240598776931593725185995578130992815931492584234554126077338982191626214'],
            ['n'=>'340282366920938463463374607431768211457', 'e'=>'7', 'd'=>'194447066811964833004929004090006662583', 'g'=>'454642564563457345737375', 'G'=>'76729941210390567985279646827008296331', 'h'=>'456457568678697897608760998098708708', 'H'=>'76568339722030499975653832909201672492', 'i'=>'67967967977976769979766700769076097690', 'I'=>'194687418555145409706398195232240181983']
        ];
    }

    public function testGenerateRandomPrime()
    {
        $randomPrime = RSA::generatePrime(10);
        $round = 10;

        $this->assertTrue(Prime::isPrimeEulerWithRandomNum($randomPrime, $round));
    }

    public function testGenerateRSAKey()
    {
        foreach ($this->providerRSAKey() as $rsaKey){
            $resultGenerateRSAKey = RSA::generateRSAKeys($rsaKey['e'], 0, $rsaKey['p'], $rsaKey['q']);

            $getPublicKey = RSA::getPublicRSA($resultGenerateRSAKey);
            $getPrivateKey = RSA::getSecretRSA($resultGenerateRSAKey);

            $n = gmp_strval(gmp_mul($rsaKey['p'], $rsaKey['q']));

            $this->assertSame($getPrivateKey['p'], $rsaKey['p']);
            $this->assertSame($getPrivateKey['q'], $rsaKey['q']);
            $this->assertSame($getPrivateKey['n'], $n);
            $this->assertSame($getPrivateKey['d'], $rsaKey['d']);

            $this->assertSame($getPublicKey['e'], $rsaKey['e']);
            $this->assertSame($getPublicKey['n'], $n);
        }
    }

    public function testEncryptPlain()
    {
        foreach ($this->providerRSACipher() as $rsaCipher){
            $publicKey = ['e'=>$rsaCipher['e'], 'n'=>$rsaCipher['n']];

            $cipherG = RSA::encryptRSA($publicKey, $rsaCipher['g']);
            $cipherH = RSA::encryptRSA($publicKey, $rsaCipher['h']);
            $cipherI = RSA::encryptRSA($publicKey, $rsaCipher['i']);

            $this->assertSame($cipherG, $rsaCipher['G']);
            $this->assertSame($cipherH, $rsaCipher['H']);
            $this->assertSame($cipherI, $rsaCipher['I']);
        }
    }

    public function testDecryptCipher()
    {
        foreach ($this->providerRSACipher() as $rsaCipher){
            $privateKey = ['d'=>$rsaCipher['d'], 'n'=>$rsaCipher['n']];

            $plainG = RSA::decryptRSA($privateKey, $rsaCipher['G']);
            $plainH = RSA::decryptRSA($privateKey, $rsaCipher['H']);
            $plainI = RSA::decryptRSA($privateKey, $rsaCipher['I']);

            $this->assertSame($plainG, $rsaCipher['g']);
            $this->assertSame($plainH, $rsaCipher['h']);
            $this->assertSame($plainI, $rsaCipher['i']);
        }
    }
}